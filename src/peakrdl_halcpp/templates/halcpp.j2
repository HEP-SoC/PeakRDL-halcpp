#ifndef _ARCHI_{{ top.inst_name.upper() }}_H_
#define _ARCHI_{{ top.inst_name.upper() }}_H_

#include <stdint.h>


template <typename D> 
class {{ top.inst_name.upper() }}_CRTP {
private:
  D &impl() { return *static_cast<D *>(this); } // CRTP

  uint32_t _BASE_ADDR;

public:
    {{ top.inst_name.upper() }}_CRTP (uint32_t base) : _BASE_ADDR(base) { };

{% for reg in top.children(unroll=True) %}
/* {{ reg.inst_name.upper() }} 
   {{ reg.get_property('desc') }}
    {% if len(reg.children(unroll=True)) == 1 %}
    {% for field in reg.children(unroll=True) %}
      FIELD DESCRIPTION: 
      {{field.get_property('desc') }}
    {% endfor %}
    {% endif %}
*/

    {% if reg.has_sw_writable %}
    inline void {{ reg.inst_name}}_set(uint32_t val){ impl().ARCHI_WRITE(_BASE_ADDR, {{ reg.address_offset }}, val);}
    {% endif %}
    {% if reg.has_sw_readable %}
    inline uint32_t {{ reg.inst_name }}_get(){ return impl().ARCHI_READ(_BASE_ADDR, {{ reg.address_offset}});}
    {% endif %}
    
    {% if len(reg.children(unroll=True)) > 1%}
    {% for field in reg.children(unroll=True) %}
    /* {{ field.inst_name.upper() }} FIELD 
       {{ field.get_property('desc') }}
    */
    {% if field.is_sw_writable %}
    inline void {{ reg.inst_name }}_{{ field.inst_name}}_set(uint32_t val){ impl().ARCHI_WRITE(_BASE_ADDR, {{ reg.address_offset }}, ({{ reg.inst_name }}_get() & {{bit_mask(field.low, field.high, width=32, inverted=True) }}) | val << {{ field.low }}  );}
    {% endif %}
    {% if field.is_sw_readable %}
    inline uint32_t {{ reg.inst_name }}_{{ field.inst_name }}_get(){ return {{ reg.inst_name }}_get() & {{ bit_mask(field.low, field.high, width=32, inverted=False)}} >> {{ field.low }};}
    {% endif %}

    {% endfor %}
    {% endif %}
{% endfor %}

};

{#
{% for reg in top.children(unroll=True) %}
/* {{ reg.inst_name.upper() }} */
    {% for field in reg.children(unroll=True) %}
        #define {{ top.inst_name.upper() }}_{{ field.inst_name.upper() }}_MASK(x) ((x >> {{ field.low }}) & 0x{{ '{:X}'.format(2**field.width-1) }})

    {% endfor %}

{% endfor %}
#}

class {{ top.inst_name.upper() }}  : public {{ top.inst_name.upper() }}_CRTP<{{ top.inst_name.upper() }}> {
    public:
    uint32_t ARCHI_READ(uint32_t base, uint32_t offset){ 
        return *(volatile uint32_t*)(base + offset);
    }
    void ARCHI_WRITE(uint32_t base, uint32_t offset, uint32_t value){
        *(volatile uint32_t*)(base + offset) = value;

    }

    {{ top.inst_name.upper() }} (uint32_t base) : {{ top.inst_name.upper() }}_CRTP(base) {
    }
};

#endif
