#ifndef __{{ node|getTypeName|upper }}_H_
#define __{{ node|getTypeName|upper }}_H_

#include <stdint.h>
#include "halcpp_base.h"
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wundefined-var-template"
#endif
{% for c in node|getAddrmapNodes %}
{{ c|getIncludeLine }}
{% endfor %}

namespace {{ node|getOrigTypeName }}_nm {
{% for r in node|getRegNodes|filterUniqueTypes %}

{% for f in r|getFieldNodes %}
{% set has_enum, enum_name, enum_strings, enum_values, enum_desc, const_width = f|getEnum %}
{% if has_enum %}
class {{ enum_name }} {
public:
{% for  s, v, d in enum_strings|zip(enum_values, enum_desc) %}
    static const halcpp::Const<{{ const_width }}, {{ v }}> {{ s }}; // {{ d }}
{% endfor %}
};
    {% endif %}
{% endfor %}

{{ r|getDocstring }}
{{ r | getTemplateLine}}
class {{ r|getTypeName|upper }} : public halcpp::{{ r|getRegType }}{{ r|getClsTmplSpec(True) }} {
public:
{% for f in r|getFieldNodes %}
    static halcpp::{{ f|getFieldType }}<{{ f.low }}, {{ f.high }}, {{ r|getClsTmplSpec }} > {{ f.inst_name }};
{% endfor %}


{% if r.has_sw_writable %}
    using halcpp::{{ r|getRegType }}{{ r|getClsTmplSpec(True) }}::operator=;
{% endif %}

};

{% if r.is_array %}
template<uint32_t BASE, uint32_t WIDTH, uint32_t LEN, uint32_t STRIDE, typename PARENT_TYPE>
class {{ r|getTypeName|upper }}_ARR : public halcpp::Arr{{ r|getRegType }}<BASE, WIDTH, LEN, STRIDE, PARENT_TYPE> {
public:
{% for ar in r.unrolled() %}
    {% set reg_offset =  ar.current_idx[0] * ar.array_stride %}
    static {{ r|getTypeName|upper }}<BASE + 0x{{ "%0x"|format(reg_offset|int) }}, WIDTH, PARENT_TYPE> r{{ ar.current_idx[0] }};
{% endfor %}

};
{% endif %}

{% endfor %}

{% for m in node|getMemNodes|filterUniqueTypes %}
{{ m|getTemplateLine }}
class {{ m|getTypeName|upper }} : public MemNode{{ m|getClsTmplSpec(True) }} {

};
{% endfor %}
}

{{ node|getDocstring }}
{{ node | getTemplateLine}}
class {{ node|getTypeName|upper }} : public AddrmapNode<BASE, PARENT_TYPE> {
public:

{% for c in node|getMemberNodes %}
    {% if c|isArrRegNode %}
        static {{ node|getOrigTypeName }}_nm::{{ c|getTypeName()|upper }}_ARR<0x{{ "%0x"|format(c|getAddrOffset|int) }}, {{ c|getSizeOrWidth }}, {{ c.array_dimensions[0] }}, {{ c.array_stride*8 }}, {{ node|getClsTmplSpec }}> {{ c.inst_name }};
    {% elif c|isRegNode or c|isMemNode %}
        static {{ node|getOrigTypeName }}_nm::{{ c|getTypeName()|upper }}<0x{{ "%0x"|format(c|getAddrOffset|int) }}, {{ c|getSizeOrWidth }}, {{ node|getClsTmplSpec }}> {{ c.inst_name }};
    {% else %}
    static {{ c|getTypeName(check_extern=True)|upper }}<0x{{ "%0x"|format(c|getAddrOffset|int) }}, {{ node|getClsTmplSpec }}> {{ c.inst_name }};
    {% endif %}
{% endfor %}


};

#endif
