#ifndef __{{ node|getTypeName|upper }}_H_
#define __{{ node|getTypeName|upper }}_H_

#include <stdint.h>
#include "halcpp_base.h"
{% for c in node|getAddrmapNodes %}
{{ c|getIncludeLine }}
{% endfor %}

namespace _{{ node|getTypeName }}_nm {
{% for r in node|getRegNodes|filterUniqueTypes %}

{{ r|getDocstring }}
{{ r | getTemplateLine}}
class {{ r|getTypeName|upper }} : public halcpp::{{ r|getRegType }}{{ r|getClsTmplSpec(True) }} {
public:
{% for f in r.children() %}
    halcpp::{{ f|getFieldType }}<{{ f.low }}, {{ f.high }}, {{ r|getClsTmplSpec }} > {{ f.inst_name }};
{% endfor %}

    {{ r|getTypeName|upper }}() {} 

{% if r.has_sw_writable %}
    using halcpp::{{ r|getRegType }}{{ r|getClsTmplSpec(True) }}::operator=;
{% endif %}

};

{% endfor %}

{% for m in node|getMemNodes|filterUniqueTypes %}
{{ m|getTemplateLine }}
class {{ m|getTypeName|upper }} : public MemNode{{ m|getClsTmplSpec(True) }} {

};
{% endfor %}
}

{{ node|getDocstring }}
{{ node | getTemplateLine}}
class {{ node|getTypeName|upper }} : public AddrmapNode<BASE, PARENT_TYPE> {
public:

{% for c in node|getMemberNodes %}
    {% if c|isRegNode or c|isMemNode %}_{{ node|getTypeName }}_nm::{% endif %}{{ c|getTypeName(check_extern=True)|upper }}<0x{{ "%0x"|format(c.address_offset|int) }}, {% if c|isMemNode or c|isRegNode %} {{ c|getSizeOrWidth }}, {% endif %}{{ node|getClsTmplSpec }}> {{ c.inst_name }};
{% endfor %}

    {{ node|getTypeName|upper }}() {}

};


#endif
